/*#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <unistd.h>
#include <errno.h>
#include <signal.h>

volatile struct two_words {
    int a, b;
} memory;



int better_sleep(double);
void handler(int);
void handler2(int);
void handler3(int);

int print_statistic = 1;
static struct two_words zeros = { 0, 0 }, ones = { 1, 1 };
static struct two_words temp[4];

int main() {

    signal(SIGALRM, handler);
    signal(SIGUSR1, handler2);
    signal(SIGUSR2, handler3);

    memory = zeros;
    alarm(3);
    while (1) {
        memory = zeros;
        memory = ones;
    }


    return 0;
}

void handler(int signum) {
    *//*printf ("%d,%d\n", memory.a, memory.b);*//*
    if (print_statistic == 1) {

        printf("\nCHILD: My PID id %d\n", getpid());
        printf("CHILD: My parent PID is %d\n", getppid());
        printf ("%d, %d\n", memory.a, memory.b);
    }

    alarm(3);
}

void handler2(int signum) {
    print_statistic = 0;
    alarm(3);
}

void handler3(int signum) {
    print_statistic = 1;
    signal(SIGALRM, handler);
    alarm(3);
}*/









/*#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <unistd.h>
#include <errno.h>
#include <signal.h>

volatile struct two_words {
    int a, b;
} memory;

void handler(int);


int print_statistic = 1;
static struct two_words zeros = { 0, 0 }, ones = { 1, 1 };
static struct two_words temp[4];
int counter = 0;

int main() {

    struct sigaction signal_struct;

    signal_struct.sa_handler = handler;
    sigemptyset(&signal_struct.sa_mask);
    signal_struct.sa_flags = 0;
    if (sigaction(SIGALRM, &signal_struct, NULL) == -1) {
        perror("CHILD: Error in sigaction (SIGALRM)!\n");
        exit(errno);
    }
    if (sigaction(SIGUSR1, &signal_struct, NULL) == -1) {
        perror("CHILD: Error in sigaction (SIGUSR1)!\n");
        exit(errno);
    }
    if (sigaction(SIGUSR2, &signal_struct, NULL) == -1) {
        perror("CHILD: Error in sigaction (SIGUSR2)!\n");
        exit(errno);
    }

    memory = zeros;
    alarm(1);
    while (1) {
        memory = zeros;
        memory = ones;
    }


    return 0;
}

void handler(int signum) {
    if (signum == SIGALRM) {
        if (counter == 4) {
            kill(getppid(), SIGUSR1);
            counter = 0;
            alarm(3);
        } else {
            temp[counter++] = memory;
            alarm(1);
        }
    }
    if (signum == SIGUSR2) {
        printf("\nCHILD: My PID id %d\n", getpid());
        printf("CHILD: My parent PID is %d\n", getppid());
        for (int i =0; i < 4; i++)
            printf ("%d, %d\t", temp[i].a, temp[i].b);
        puts("\n");
    }
    // printf ("%d,%d\n", memory.a, memory.b);

}*/